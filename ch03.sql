/**********************SET THE DATA RETENTION LIMIT***********************/
ALTER TABLE TABLE1 SET DATA_RETENTION_TIME_IN_DAYS = 60; 

/**********************EXAMPLE TIME TRAVEL STATEMENT*************************/
SELECT * FROM TABLE1 AT(timestamp => '2021-06-07 02:21:10.00 -0700'::timestamp_tz);

/**********************CLONE PERMISSIONS*************************/
//CREATE DEMO DATABASE 
CREATE OR REPLACE DATABASE DEMO;

//GRANT USAGE ON THE DATABASE TO SYSADMIN
GRANT USAGE ON DATABASE DEMO TO SYSADMIN;

//CLONE THE DATABASE AS DEMO_CLONE
CREATE OR REPLACE DATABASE DEMO_CLONE CLONE DEMO;

//COMPARE THE GRANTS ASSIGNED TO BOTH DATABASES
SHOW GRANTS ON DATABASE DEMO;

//NOTE THAT THE USAGE GRANT DOESN'T APPEAR IN DEMO_CLONE
SHOW GRANTS ON DATABASE DEMO_CLONE;

//CREATE A TABLE IN THE DEMO DATABASE
CREATE OR REPLACE TABLE DEMO.PUBLIC.TABLE1 (COL1 CHAR(1));

//GRANT SELECT ON THE TABLE
GRANT SELECT ON TABLE DEMO.PUBLIC.TABLE1 TO SYSADMIN;

//RE-CREATE THE DATABASE CLONE
CREATE OR REPLACE DATABASE DEMO_CLONE CLONE DEMO;

//EXAMINE THE GRANTS ON EACH TABLE
SHOW GRANTS ON TABLE DEMO.PUBLIC.TABLE1; 

//NOTE THAT BY CLONING AT THE DATABASE LEVEL THE CHILD OBJECTS PERMISSIONS ARE PRESERVED
SHOW GRANTS ON TABLE DEMO_CLONE.PUBLIC.TABLE1; 

//CREATE A CLONE OF THE TABLE
CREATE OR REPLACE TABLE DEMO.PUBLIC.TABLE_CLONE CLONE DEMO.PUBLIC.TABLE1;

//NOTICE THAT THE SELECT PRIVILEGE DOESN'T CARRY OVER TO THE CLONE
SHOW GRANTS ON TABLE DEMO.PUBLIC.TABLE_CLONE; 

/*****************RE-CREATING PRIVLEGES ON A CLONED OBJECT*********************/
//CREATE DATABASE
CREATE OR REPLACE DATABASE DEMO;

//CREATE SCHEMA
CREATE OR REPLACE SCHEMA ORIGINAL;

//GRANT SOME PRIVILEGES
GRANT OWNERSHIP ON SCHEMA ORIGINAL TO PUBLIC;
GRANT CREATE EXTERNAL TABLE ON SCHEMA ORIGINAL TO PUBLIC;

//CHECK THE GRANTS
SHOW GRANTS ON SCHEMA ORIGINAL;

//RENAME THE EXISTING SCHEMA
ALTER SCHEMA ORIGINAL RENAME TO ORIGINAL_RENAMED;

//CHECK THE GRANTS REMAIN ON THE RENAMED SCHEMA
SHOW GRANTS ON SCHEMA ORIGINAL_RENAMED;

//CREATE THE SCHEMA FROM AN EARLIER POINT IN TIME WITH THE ORIGINAL NAME 
CREATE SCHEMA ORIGINAL CLONE ORIGINAL_RENAMED AT(timestamp => '2021-06-07 02:21:10.00 -0700'::timestamp_tz);--ENSURE YOU CHANGE THE TIMESTAMP TO A VALID 

//CHECK THE GRANTS ON THE CLONED SCHEMA 
//NOTE THEY HAVE NOT BEEN CARRIED OVER
SHOW GRANTS ON SCHEMA ORIGINAL;

//NEXT WE CAN RUN SOME STATEMENTS TO GENERATE SOME DYNAMIC SQL
//FIRST WE EXECUTE STATEMENT TO RETURN THE GRANTS ON THE ORIGINAL SCHEMA
SHOW GRANTS ON SCHEMA ORIGINAL_RENAMED;

//NEXT WE USE THE TABLE FUNCTON RESULT_SCAN AND WE PASS IN THE LAST QUERY ID
//THIS PRODUCES A RESULTS SET BASED ON THE LAST QUERY WE EXECUTED
SELECT * FROM TABLE(RESULT_SCAN(LAST_QUERY_ID()));

//WE PUT THESE RESULTS INTO A TEMPORARY TABLE 
CREATE TEMPORARY TABLE ORIGINAL_SCHEMA_GRANTS AS SELECT * FROM TABLE(RESULT_SCAN(LAST_QUERY_ID()));
SELECT * FROM  ORIGINAL_SCHEMA_GRANTS;

//WE CAN THEN RUN THE FOLLOWING SELECT AGAINST THE TEMP TABLE TO GENERATE THE SQL WE NEED TO RUN
//NOTE: MAKE SURE YOU REPLACE DEMO.ORIGINAL WITH YOUR OWN DATABASE AND SCHEMA NAME
SELECT 'GRANT ' || "privilege"  ||  ' ON ' || "granted_on"  ||' '||  'DEMO.ORIGINAL'  || ' TO ROLE ' || "grantee_name" || ';' FROM ORIGINAL_SCHEMA_GRANTS;


//EXECUTE THE GENERATED SQL
GRANT CREATE EXTERNAL TABLE ON SCHEMA DEMO.ORIGINAL TO ROLE PUBLIC;
GRANT OWNERSHIP ON SCHEMA DEMO.ORIGINAL TO ROLE PUBLIC;

//VALIDATE THE GRANTS
SHOW GRANTS ON SCHEMA ORIGINAL;

SHOW GRANTS ON SCHEMA ORIGINAL_RENAMED;

DROP DATABASE IF EXISTS DEMO;

/*******************PRACTICAL EXAMPLE********************/
//CREATE A SAMPLE DEV DATABASE
CREATE OR REPLACE DATABASE SALES_DEV;

//CREATE A ORDERS TABLE BASED ON THE SNOWFLAKE SAMPLE DATA
CREATE TABLE ORDERS AS 
SELECT * FROM "SNOWFLAKE_SAMPLE_DATA"."TPCH_SF1".ORDERS;

//GENERATE A SAMPLE PROD DATABASE FROM A CLONE OF THE DEV DATABASE 
CREATE OR REPLACE DATABASE SALES_PROD CLONE SALES_DEV;

//ALTER THE COLUMN IN SALES_DEV
USE DATABASE SALES_DEV;
UPDATE ORDERS
SET O_TOTALPRICE = O_TOTALPRICE * 1.1;

//CHECK THE RECORDS HAVE BEEN UPDATED COMPARING DATA BETWEEN SALES_DEV AND SALES_PROD
SELECT O_ORDERKEY, O_TOTALPRICE 
FROM SALES_DEV.PUBLIC.ORDERS 
ORDER BY O_ORDERKEY 
DESC LIMIT 10;

SELECT O_ORDERKEY, O_TOTALPRICE, O_TOTALPRICE * 1.1  
FROM SALES_PROD.PUBLIC.ORDERS 
ORDER BY O_ORDERKEY DESC 
LIMIT 10;

//AFTER VALIDATING THE CHANGES WE CAN PROMOTE THE CHANGE TO PRODUCTION
USE DATABASE SALES_PROD;
CREATE OR REPLACE TABLE ORDERS CLONE SALES_DEV.PUBLIC.ORDERS;

//FINAL CHECKS BETWEEN SALES_DEV AND SALES_PROD
SELECT DEV.O_ORDERKEY, DEV.O_TOTALPRICE, PROD.O_TOTALPRICE 
FROM SALES_DEV.PUBLIC.ORDERS DEV
INNER JOIN SALES_PROD.PUBLIC.ORDERS PROD ON DEV.O_ORDERKEY = PROD.O_ORDERKEY
LIMIT 10;

SELECT DEV.O_ORDERKEY, DEV.O_TOTALPRICE - PROD.O_TOTALPRICE AS DIFFERENCE
FROM SALES_DEV.PUBLIC.ORDERS DEV
INNER JOIN SALES_PROD.PUBLIC.ORDERS PROD ON DEV.O_ORDERKEY = PROD.O_ORDERKEY
HAVING DIFFERENCE <> 0;


DROP DATABASE IF EXISTS SALES_DEV;
DROP DATABASE IF EXISTS SALES_PROD;
