//SET CACHING TO OFF FOR THE SESSION
ALTER SESSION SET USE_CACHED_RESULT = FALSE;

//TPC-DS_query1
with customer_total_return as
(select sr_customer_sk as ctr_customer_sk
,sr_store_sk as ctr_store_sk
,sum(SR_RETURN_AMT_INC_TAX) as ctr_total_return
from store_returns
,date_dim
where sr_returned_date_sk = d_date_sk
and d_year =1999
group by sr_customer_sk
,sr_store_sk)
 select  c_customer_id
from customer_total_return ctr1
,store
,customer
where ctr1.ctr_total_return > (select avg(ctr_total_return)*1.2
from customer_total_return ctr2
where ctr1.ctr_store_sk = ctr2.ctr_store_sk)
and s_store_sk = ctr1.ctr_store_sk
and s_state = 'NM'
and ctr1.ctr_customer_sk = c_customer_sk
order by c_customer_id
limit 100;

//EXAMPLE OF SETTING THE CLUSTERING KEY ON A TABLE
CREATE OR REPLACE TABLE TEST (C1 INT, C2 INT) CLUSTER BY (C1, C2);

//OR ALTER AN EXISTING TABLE
ALTER TABLE TEST CLUSTER BY (C1, C2);

//VIEW CLUSTERING KEY
SHOW TABLES LIKE 'TEST';

//VIEW CLUSTERING INFORMATION
USE SCHEMA SNOWFLAKE_SAMPLE_DATA.TPCDS_SF10TCL;

SELECT SYSTEM$CLUSTERING_DEPTH('store_returns');
SELECT SYSTEM$CLUSTERING_INFORMATION('store_returns');

//RECLUSTERING A TABLE
ALTER TABLE TEST RECLUSTER;

//RECLUSTER A TABLE TO A MAX NUMBER OF BYTES
ALTER TABLE TEST RECLUSTER MAX_SIZE = 100000;

//EXAMPLE POINT LOOKUP QUERY
SELECT D_DATE, SS_SALES_PRICE
FROM "SNOWFLAKE_SAMPLE_DATA"."TPCDS_SF100TCL"."CUSTOMER" C
INNER JOIN "SNOWFLAKE_SAMPLE_DATA"."TPCDS_SF100TCL"."STORE_SALES" SS ON SS.SS_CUSTOMER_SK = C.C_CUSTOMER_SK
INNER JOIN "SNOWFLAKE_SAMPLE_DATA"."TPCDS_SF100TCL"."DATE_DIM" DD ON SS.SS_SOLD_DATE_SK = DD.D_DATE_SK
WHERE C_EMAIL_ADDRESS = 'Charles.Griffin@NiYQcIy70.edu';

//ADDING SEARCH OPTIMIZATION TO A SCHEMA AND ROLE
GRANT ADD SEARCH OPTIMIZATION ON SCHEMA SALES TO ROLE BI_DEVELOPERS;

//ADDING SEARCH OPTIMIZATION TO A TABLE
ALTER TABLE SALES.SALES_TRANSACTIONS ADD SEARCH OPTIMIZATION;

--ACCOUNT-LEVEL RESOURCE MONITOR
USE ROLE ACCOUNTADMIN;

CREATE RESOURCE MONITOR MONTHLY_ACCOUNT_BUDGET 
WITH 
  CREDIT_QUOTA    = 1000
  FREQUENCY       = MONTHLY
  START_TIMESTAMP = IMMEDIATELY
TRIGGERS 
  ON 90 PERCENT DO NOTIFY
  ON 95 PERCENT DO SUSPEND
  ON 99 PERCENT DO SUSPEND_IMMEDIATE;

ALTER ACCOUNT SET RESOURCE_MONITOR = MONTHLY_ACCOUNT_BUDGET;

--WAREHOUSE LEVEL RESOURCE MONITOR
USE ROLE ACCOUNTADMIN;

CREATE RESOURCE MONITOR DATA_SCIENCE_WH_BUDGET 
WITH 
  CREDIT_QUOTA    = 10
  FREQUENCY       = MONTHLY
  START_TIMESTAMP = IMMEDIATELY
TRIGGERS 
  ON 70 PERCENT DO NOTIFY
  ON 80 PERCENT DO NOTIFY
  ON 90 PERCENT DO NOTIFY
  ON 99 PERCENT DO SUSPEND
  ON 100 PERCENT DO SUSPEND_IMMEDIATE;

ALTER WAREHOUSE DATA_SCIENCE_WH SET RESOURCE_MONITOR = DATA_SCIENCE_WH_BUDGET;

-- IDENTIFY POOR SQL QUERIES USING THE QUERY_HISTORY
SELECT  QUERY_ID,
        ROUND(BYTES_SCANNED/1024/1024) AS MB_SCANNED,
        TOTAL_ELAPSED_TIME/1000        AS SECS_ELAPSED,
        (PARTITIONS_SCANNED/NULLIF(PARTITIONS_TOTAL,0)) * 100 AS TABLE_SCAN_PCT,
        PERCENTAGE_SCANNED_FROM_CACHE*100 AS PCT_FROM_CACHE,
        BYTES_SPILLED_TO_LOCAL_STORAGE,
        BYTES_SPILLED_TO_REMOTE_STORAGE
FROM   SNOWFLAKE.ACCOUNT_USAGE.QUERY_HISTORY
WHERE (BYTES_SPILLED_TO_LOCAL_STORAGE > 1024 * 1024 OR
       BYTES_SPILLED_TO_REMOTE_STORAGE > 1024 * 1024 OR
       PERCENTAGE_SCANNED_FROM_CACHE < 0.1)
AND  TOTAL_ELAPSED_TIME > 300000
AND    BYTES_SCANNED > 1024 * 1024
ORDER BY TOTAL_ELAPSED_TIME DESC;