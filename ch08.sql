//CREATE DATABASE
CREATE OR REPLACE DATABASE RAW;

//CREATE SCHEMA
CREATE OR REPLACE SCHEMA STAGE;

//CREATE TABLE LIKE SAMPLE DATA
CREATE OR REPLACE TABLE STAGE.LOAD_CUSTOMER 
LIKE SNOWFLAKE_SAMPLE_DATA.TPCDS_SF100TCL.CUSTOMER; 

//CREATE TABLE AS SELECT SAMPLE DATA
CREATE OR REPLACE TABLE STAGE.LOAD_CUSTOMER 
AS 
SELECT C_CUSTOMER_ID 
FROM SNOWFLAKE_SAMPLE_DATA.TPCDS_SF100TCL.CUSTOMER 
LIMIT 100;

//CREATE TABLE CLONE
CREATE OR REPLACE TABLE STAGE.LOAD_CUSTOMER_V2 
CLONE STAGE.LOAD_CUSTOMER;

//CREATE TABLE LIKE SAMPLE DATA
CREATE OR REPLACE TABLE STAGE.LOAD_CUSTOMER 
LIKE SNOWFLAKE_SAMPLE_DATA.TPCDS_SF100TCL.CUSTOMER
COPY GRANTS;

//CREATE TABLE AS SELECT SAMPLE DATA
CREATE OR REPLACE TABLE STAGE.LOAD_CUSTOMER 
COPY GRANTS
AS 
SELECT C_CUSTOMER_ID 
FROM SNOWFLAKE_SAMPLE_DATA.TPCDS_SF100TCL.CUSTOMER 
LIMIT 100;

//CREATE TABLE CLONE
CREATE OR REPLACE TABLE STAGE.LOAD_CUSTOMER_V2 
CLONE STAGE.LOAD_CUSTOMER
COPY GRANTS;



/**************SIMPLE STORED PROCEDURE EXAMPLE**************/
CREATE OR REPLACE PROCEDURE simple_stored_procedure_example()
returns float not null
language javascript
as
$$
var cmd = 'SELECT 1;'
var sql = snowflake.createStatement({sqlText: cmd});
var result = sql.execute();
return result;
$$;

//CALL STORED PROCEDURE
CALL simple_stored_procedure_example();


//CREATE INITIAL TABLE FOR STATE 'CA' FROM SAMPLE DATA USING CREATE TABLE AS SELECT
CREATE OR REPLACE TABLE STAGE.LOAD_CUSTOMER_CA 
AS SELECT C_SALUTATION,
            C_FIRST_NAME,
            C_LAST_NAME,
            TO_DATE(CUST.C_BIRTH_YEAR || '-' || CUST.C_BIRTH_MONTH || '-' || CUST.C_BIRTH_DAY) AS DOB,
            CUST.C_EMAIL_ADDRESS,
            DEM.CD_GENDER,
            DEM.CD_MARITAL_STATUS,
            DEM.CD_EDUCATION_STATUS
            
    FROM SNOWFLAKE_SAMPLE_DATA.TPCDS_SF100TCL.CUSTOMER CUST
    LEFT JOIN SNOWFLAKE_SAMPLE_DATA.TPCDS_SF100TCL.CUSTOMER_DEMOGRAPHICS DEM ON CUST.C_CURRENT_CDEMO_SK = DEM.CD_DEMO_SK
    LIMIT 100;

//USE CREATE TABLE LIKE TO CREATE TABLES FOR STATES NY AND DE
CREATE OR REPLACE TABLE STAGE.LOAD_CUSTOMER_NY 
LIKE STAGE.LOAD_CUSTOMER_CA;

CREATE OR REPLACE TABLE STAGE.LOAD_CUSTOMER_DE 
LIKE STAGE.LOAD_CUSTOMER_CA;

CREATE OR REPLACE PROCEDURE STAGE.LOAD_CUSTOMERS(VAR_SCHEMA VARCHAR, VAR_TABLE VARCHAR, VAR_STATE VARCHAR)
returns string 
language javascript
as
$$
var sql = 
    `INSERT OVERWRITE INTO RAW.` + VAR_SCHEMA + `.` + VAR_TABLE 
 + ` SELECT C_SALUTATION,
            C_FIRST_NAME,
            C_LAST_NAME,
            TO_DATE(CUST.C_BIRTH_YEAR || '-' || CUST.C_BIRTH_MONTH || '-' || CUST.C_BIRTH_DAY) AS DOB,
            CUST.C_EMAIL_ADDRESS,
            DEM.CD_GENDER,
            DEM.CD_MARITAL_STATUS,
            DEM.CD_EDUCATION_STATUS
            
    FROM SNOWFLAKE_SAMPLE_DATA.TPCDS_SF100TCL.CUSTOMER CUST
    LEFT JOIN SNOWFLAKE_SAMPLE_DATA.TPCDS_SF100TCL.CUSTOMER_DEMOGRAPHICS DEM ON CUST.C_CURRENT_CDEMO_SK = DEM.CD_DEMO_SK
    LEFT JOIN SNOWFLAKE_SAMPLE_DATA.TPCDS_SF100TCL.CUSTOMER_ADDRESS ADDR ON CUST.C_CURRENT_ADDR_SK = ADDR.CA_ADDRESS_SK
    WHERE ADDR.CA_STATE = '` + VAR_STATE + `';`;

try {
    snowflake.execute (
        {sqlText: sql}
        );
    return "Succeeded."; //Return a success
    }
catch (err) {
    return "Failed: " + err; //Return error
}
$$;

//TEST THE STORED PROCS WITH THE SCHEMA, TABLE AND STATE CODE
CALL STAGE.LOAD_CUSTOMERS('STAGE', 'LOAD_CUSTOMER_CA', 'CA');
CALL STAGE.LOAD_CUSTOMERS('STAGE', 'LOAD_CUSTOMER_NY', 'NY');
CALL STAGE.LOAD_CUSTOMERS('STAGE', 'LOAD_CUSTOMER_DE', 'DE');

//CHECK THE TABLES
SELECT COUNT(*) FROM STAGE.LOAD_CUSTOMER_CA;
SELECT COUNT(*) FROM STAGE.LOAD_CUSTOMER_NY;
SELECT COUNT(*) FROM STAGE.LOAD_CUSTOMER_DE;

//CREATE THE TASKS
CREATE OR REPLACE TASK STAGE_LOAD_CUSTOMER_CA_TABLE
  WAREHOUSE = COMPUTE_WH
  SCHEDULE = '5 MINUTE'
AS 
CALL STAGE.LOAD_CUSTOMERS('STAGE', 'LOAD_CUSTOMER_CA', 'CA');

//CREATE THE TASKS
CREATE OR REPLACE TASK STAGE_LOAD_CUSTOMER_NY_TABLE
  WAREHOUSE = COMPUTE_WH
  SCHEDULE = '5 MINUTE'
AS 
CALL STAGE.LOAD_CUSTOMERS('STAGE', 'LOAD_CUSTOMER_NY', 'NY');

//CREATE THE TASKS
CREATE OR REPLACE TASK STAGE_LOAD_CUSTOMER_DE_TABLE
  WAREHOUSE = COMPUTE_WH
  SCHEDULE = '5 MINUTE'
AS 
CALL STAGE.LOAD_CUSTOMERS('STAGE', 'LOAD_CUSTOMER_DE', 'DE');

//CLEAR THE TABLES
TRUNCATE TABLE STAGE.LOAD_CUSTOMER_CA;
TRUNCATE TABLE STAGE.LOAD_CUSTOMER_NY;
TRUNCATE TABLE STAGE.LOAD_CUSTOMER_DE;

//RESUME THE TASKS
USE ROLE ACCOUNTADMIN;

ALTER TASK STAGE_LOAD_CUSTOMER_CA_TABLE RESUME;
ALTER TASK STAGE_LOAD_CUSTOMER_NY_TABLE RESUME;
ALTER TASK STAGE_LOAD_CUSTOMER_DE_TABLE RESUME;

//AFTER 5 MINS THE TABLES SHOULD BE POPULATED
USE ROLE SYSADMIN;

SELECT COUNT(*) FROM STAGE.LOAD_CUSTOMER_CA;
SELECT COUNT(*) FROM STAGE.LOAD_CUSTOMER_NY;
SELECT COUNT(*) FROM STAGE.LOAD_CUSTOMER_DE;

//SIMPLE USER-DEFINED SCALAR FUNCTION
CREATE OR REPLACE FUNCTION PI_UDF()
  RETURNS FLOAT
  AS '3.141592654::FLOAT';
  
SELECT PI_UDF();

//SIMPLE USER-DEFINED SCALAR FUNCTION WITH INPUT PARAMETER
CREATE OR REPLACE FUNCTION ADD_SALES_TAX(NET_SALES FLOAT)
  RETURNS FLOAT
  AS 'SELECT NET_SALES * 1.1';

//CREATE A SIMPLE TABLE TO STORE NET SALES VALUES
CREATE OR REPLACE TABLE SALES
(NET_SALES DECIMAL);

INSERT INTO SALES
SELECT 132.21
UNION 
SELECT 21.00
UNION 
SELECT 2837.33
UNION 
SELECT 99.99
;

//CALL THE FUNCTION
SELECT NET_SALES, ADD_SALES_TAX(NET_SALES)
FROM SALES;

//CREATE TABLE FUNCTION 
CREATE OR REPLACE FUNCTION GET_ADDRESS_FOR_CUSTOMER(CUSTOMER_ID VARCHAR(16))
RETURNS TABLE (STREET_NUMBER VARCHAR(10), STREET_NAME VARCHAR(60), CITY VARCHAR(60), STATE VARCHAR(2), ZIP VARCHAR(10))
AS 'SELECT CA_STREET_NUMBER, CA_STREET_NAME, CA_CITY, CA_STATE, CA_ZIP  
    FROM SNOWFLAKE_SAMPLE_DATA.TPCDS_SF100TCL.CUSTOMER CUST
    LEFT JOIN SNOWFLAKE_SAMPLE_DATA.TPCDS_SF100TCL.CUSTOMER_ADDRESS ADDR ON CUST.C_CURRENT_ADDR_SK = ADDR.CA_ADDRESS_SK  
    WHERE C_CUSTOMER_ID = CUSTOMER_ID';
    
//CALL TABLE FUNCTION
SELECT STREET_NUMBER, STREET_NAME, CITY, STATE, ZIP  
FROM TABLE(GET_ADDRESS_FOR_CUSTOMER('AAAAAAAAFMHIAGFA'));


//SET VARIABLES
SET my_schema_name = 'sales';

SET (sales_schema, finance_schema) = ('sales', 'fin');

SET (sales_schema, finance_schema) = (SELECT 'sales', 'fin');

//SET VARIABLES
SET (min, max) = (30, 70);

SELECT $min;

//USING AN IDENTIFIER
USE SNOWFLAKE_SAMPLE_DATA;

SET TPC_DATE_DIM = 'TPCDS_SF100TCL.DATE_DIM';

SELECT *
FROM identifier($TPC_DATE_DIM);

//PRACTICAL EXAMPLE
CREATE OR REPLACE TABLE EMPLOYEE
(EmploymentID number,
 AGE INT,
Salary number);

INSERT INTO EMPLOYEE
SELECT 1234, 18, 15000
UNION
SELECT 432, 28, 30000
UNION
SELECT 7462, 23, 17500
UNION
SELECT 8464, 37, 32000
UNION
SELECT 7373, 52, 44000;

//RUN A SELECT STATEMENT USING THE VARIABLES
SELECT AVG(salary) 
FROM EMPLOYEE 
WHERE AGE BETWEEN $min AND $max;

//DISPLAY THE VARIABLES
SHOW VARIABLES;

//DROP THE VARIABLES
UNSET (min, max);

//DISPLAY THE VARIABLES
SHOW VARIABLES;

//CLEAN UP 
DROP DATABASE IF EXISTS RAW;

  