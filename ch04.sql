//ENSURE SYSADMIN IS USED
USE ROLE SYSADMIN;

//CREATE DATABASE 
CREATE OR REPLACE DATABASE PII_DEMO;

//CREATE SCHEMAS
CREATE OR REPLACE SCHEMA SALES;
CREATE OR REPLACE SCHEMA CUSTOMER_PII;
CREATE OR REPLACE SCHEMA PRESENTATION;

//CREATE SALES TABLE TO STORE NON PII DATA
CREATE OR REPLACE TABLE SALES.ORDERS
(ORDER_ID INT,
 CUSTOMER_ID INT,
 ORDER_DATE TIMESTAMP_TZ);
  
//CREATE CUSTOMER TABLE TO STORE PII (CUSTOMER_EMAIL)
CREATE OR REPLACE TABLE CUSTOMER_PII.CUSTOMER
(CUSTOMER_ID INT,
 CUSTOMER_EMAIL VARCHAR(50));
  
//INSERT SOME SAMPLE RECORDS TO BOTH TABLES
INSERT INTO SALES.ORDERS 
SELECT 1, 1, '2021-06-07 12:21:10.00'
UNION
SELECT 2, 1, '2021-06-10 14:21:10.00';
 
INSERT INTO CUSTOMER_PII.CUSTOMER
SELECT 1, 'customer1@gmail.com';


//CREATE NORMAL UNSECURED VIEW
CREATE OR REPLACE VIEW PRESENTATION.CUSTOMER_LAST_ORDER_DATE
AS
SELECT C.CUSTOMER_ID, 
        C.CUSTOMER_EMAIL, 
        MAX(O.ORDER_DATE) AS MOST_RECENT_ORDER_DATE
FROM CUSTOMER_PII.CUSTOMER C
INNER JOIN SALES.ORDERS O on C.CUSTOMER_ID = O.CUSTOMER_ID
GROUP BY C.CUSTOMER_ID, C.CUSTOMER_EMAIL;


//INTRODUCE OBFUSCATION
CREATE OR REPLACE VIEW PRESENTATION.CUSTOMER_LAST_ORDER_DATE_PII
AS
SELECT C.CUSTOMER_ID, 
        CASE WHEN CURRENT_ROLE() <> 'SENSITIVE_ALLOWED_ROLE' --NOTE THE USE OF CURRENT ROLE HERE
                THEN 'XXX-XX-XXXX' --THIS IS WHAT USERS OUTSIDE OF THE SENSITIVE_ALLOWED_ROLE WILL SEE RETURNED
                 ELSE CUSTOMER_EMAIL
            END AS CUSTOMER_EMAIL, 
        MAX(O.ORDER_DATE) AS MOST_RECENT_ORDER_DATE
FROM CUSTOMER_PII.CUSTOMER C
INNER JOIN SALES.ORDERS O on C.CUSTOMER_ID = O.CUSTOMER_ID
GROUP BY C.CUSTOMER_ID, C.CUSTOMER_EMAIL;

//FINALLY TO PREVENT USERS BEING ABLE TO INFER THE UNDERLYING DATA STRUCTURES 
//CREATE THE VIEW AS A SECURE VIEW
CREATE OR REPLACE SECURE VIEW PRESENTATION.CUSTOMER_LAST_ORDER_DATE_PII_SECURE
AS
SELECT C.CUSTOMER_ID, 
        CASE WHEN CURRENT_ROLE() <> 'SENSITIVE_ALLOWED_ROLE' --NOTE THE USE OF CURRENT ROLE HERE
                THEN 'XXX-XX-XXXX' --THIS IS WHAT USERS OUTSIDE OF THE SENSITIVE_ALLOWED_ROLE WILL SEE RETURNED
                 ELSE CUSTOMER_EMAIL
            END AS CUSTOMER_EMAIL, 
        MAX(O.ORDER_DATE) AS MOST_RECENT_ORDER_DATE
FROM CUSTOMER_PII.CUSTOMER C
INNER JOIN SALES.ORDERS O on C.CUSTOMER_ID = O.CUSTOMER_ID
GROUP BY C.CUSTOMER_ID, C.CUSTOMER_EMAIL;

//GRANT PERMISSIONS ON WAREHOUSE AND DATABASE TO SECURITYADMIN
GRANT USAGE ON WAREHOUSE COMPUTE_WH TO SECURITYADMIN;
GRANT USAGE ON DATABASE PII_DEMO TO SECURITYADMIN;

//SWITCH TO USE SECURITYADMIN ROLE TO CARRY OUT GRANTS AND CREATE ROLES 
USE ROLE SECURITYADMIN;

//CREATE NEW ROLES
CREATE OR REPLACE ROLE SENSITIVE_ALLOWED_ROLE; --PII DATA ALLOWED
CREATE OR REPLACE ROLE SENSITIVE_DENIED_ROLE; --NO ACCESS TO PII DATA

//GRANT PERMISSIONS ON OBJECTS TO BOTH ROLES
GRANT USAGE ON WAREHOUSE COMPUTE_WH TO SENSITIVE_ALLOWED_ROLE;
GRANT USAGE ON WAREHOUSE COMPUTE_WH TO SENSITIVE_DENIED_ROLE;

GRANT USAGE ON DATABASE PII_DEMO TO SENSITIVE_ALLOWED_ROLE;
GRANT USAGE ON DATABASE PII_DEMO TO SENSITIVE_DENIED_ROLE;

GRANT USAGE ON SCHEMA CUSTOMER_PII TO SENSITIVE_ALLOWED_ROLE;
GRANT USAGE ON SCHEMA SALES TO SENSITIVE_ALLOWED_ROLE;
GRANT USAGE ON SCHEMA PRESENTATION TO SENSITIVE_ALLOWED_ROLE;

GRANT USAGE ON SCHEMA CUSTOMER_PII TO SENSITIVE_DENIED_ROLE;
GRANT USAGE ON SCHEMA SALES TO SENSITIVE_DENIED_ROLE;
GRANT USAGE ON SCHEMA PRESENTATION TO SENSITIVE_DENIED_ROLE;

GRANT SELECT ON VIEW  PRESENTATION.CUSTOMER_LAST_ORDER_DATE TO SENSITIVE_ALLOWED_ROLE;
GRANT SELECT ON VIEW  PRESENTATION.CUSTOMER_LAST_ORDER_DATE TO SENSITIVE_DENIED_ROLE;

GRANT SELECT ON VIEW  PRESENTATION.CUSTOMER_LAST_ORDER_DATE_PII TO SENSITIVE_ALLOWED_ROLE;
GRANT SELECT ON VIEW  PRESENTATION.CUSTOMER_LAST_ORDER_DATE_PII TO SENSITIVE_DENIED_ROLE;

GRANT SELECT ON VIEW  PRESENTATION.CUSTOMER_LAST_ORDER_DATE_PII_SECURE TO SENSITIVE_ALLOWED_ROLE;
GRANT SELECT ON VIEW  PRESENTATION.CUSTOMER_LAST_ORDER_DATE_PII_SECURE TO SENSITIVE_DENIED_ROLE;

//ADD BOTH THESE ROLES TO YOUR OWN USER TO MAKE IT EASY TO TEST OUT FOR THIS DEMO
GRANT ROLE SENSITIVE_ALLOWED_ROLE TO USER MYUSERNAME;
GRANT ROLE SENSITIVE_DENIED_ROLE TO USER MYUSERNAME;

//SWITCH CONTEXT TO SYSADMIN
USE ROLE SYSADMIN;

//OBSERVE RESULTS FROM NORMAL VIEW
SELECT * FROM PRESENTATION.CUSTOMER_LAST_ORDER_DATE;

//CHANGE THE CONTEXT OF THE ROLE 
USE ROLE SENSITIVE_ALLOWED_ROLE;
SELECT CURRENT_ROLE();

//OBSERVE THE FACT ALL VALUES ARE RETURNED INCLUDING CUSTOMER EMAIL
SELECT * FROM PRESENTATION.CUSTOMER_LAST_ORDER_DATE_PII; 

//SWITCH THE CONTEXT OF THE ROLE TO USERS WHO CANNOT VIEW PII
USE ROLE SENSITIVE_DENIED_ROLE;
SELECT CURRENT_ROLE();

//SELECT FROM THE VIEW AGAIN AND NOTE THE VALUE OF THE CUSTOMER EMAIL IS NOW MASKED
SELECT * FROM PRESENTATION.CUSTOMER_LAST_ORDER_DATE_PII;

//VIEW THE DDL FOR THE VIEW
SELECT GET_DDL('VIEW', 'CUSTOMER_LAST_ORDER_DATE_PII_SECURE', TRUE);

//CHANGE THE CONTEXT OF THE ROLE 
USE ROLE SENSITIVE_ALLOWED_ROLE;

//OBSERVE THE FACT ALL VALUES ARE RETURNED INCLUDING CUSTOMER EMAIL
SELECT * FROM PRESENTATION.CUSTOMER_LAST_ORDER_DATE_PII_SECURE; 

//ADDITIONALLY TRY AND VIEW THE DDL OF THE SECURE VIEW
SELECT GET_DDL('VIEW', 'CUSTOMER_LAST_ORDER_DATE_PII_SECURE', TRUE);

//SWITCH THE CONTEXT OF THE ROLE TO USERS WHO CANNOT VIEW PII
USE ROLE SENSITIVE_DENIED_ROLE;

//SELECT FROM THE VIEW AGAIN AND NOTE THE VALUE OF THE CUSTOMER EMAIL
SELECT * FROM PRESENTATION.CUSTOMER_LAST_ORDER_DATE_PII_SECURE;

//ADDITIONALLY TRY AND VIEW THE DDL OF THE SECURE VIEW
SELECT GET_DDL('VIEW', 'CUSTOMER_LAST_ORDER_DATE_PII_SECURE', TRUE);

//SWITCH ROLE
USE ROLE SYSADMIN;

//CREATE MASKING POLICY
CREATE OR REPLACE MASKING POLICY EMAIL_MASK AS (VAL STRING) RETURNS STRING ->
  CASE
    WHEN CURRENT_ROLE() <> ('SENSITIVE_ALLOWED_ROLE') THEN 'XXX-XX-XXXX'
    ELSE VAL 
  END;

//ATTACH THE MASKING POLICY TO THE CUSTOMER_EMAIL COLUMN ON THE NORMAL VIEW WE CREATED EARLIER
ALTER VIEW PRESENTATION.CUSTOMER_LAST_ORDER_DATE MODIFY COLUMN CUSTOMER_EMAIL SET MASKING POLICY EMAIL_MASK;

//CHANGE THE CONTEXT OF THE ROLE AND OBSERVE RESULTS
USE ROLE SENSITIVE_ALLOWED_ROLE;
SELECT * FROM PRESENTATION.CUSTOMER_LAST_ORDER_DATE;

USE ROLE SENSITIVE_DENIED_ROLE;
SELECT * FROM PRESENTATION.CUSTOMER_LAST_ORDER_DATE;

//NOTE THE THE DDL IS UNCHANGED AS THE MASKING IS APPLIED AT EXECUTION TIME
SELECT GET_DDL('VIEW', 'PRESENTATION.CUSTOMER_LAST_ORDER_DATE', TRUE);

//ROW ACCESS POLICIES
//ENSURE SYSADMIN IS USED
USE ROLE SYSADMIN;

//CREATE DATABASE
CREATE OR REPLACE DATABASE ROW_ACCESS;
USE DATABASE ROW_ACCESS;

//CREATE TABLE
CREATE OR REPLACE TABLE SALES
(ORDERNUMBER INTEGER,
QUANTITYORDERED INTEGER,
PRICEEACH INTEGER,
ORDERLINENUMBER INTEGER,
SALES INTEGER,
STATUS VARCHAR(100),
QTR_ID INTEGER,
MONTH_ID INTEGER,
YEAR_ID INTEGER,
PRODUCTLINE VARCHAR(100),
MSRP INTEGER,
PRODUCTCODE VARCHAR(100),
CUSTOMERNAME VARCHAR(100),
ADDRESSLINE1 VARCHAR(100),
ADDRESSLINE2 VARCHAR(100),
CITY VARCHAR(100),
STATE VARCHAR(100),
POSTALCODE VARCHAR(100),
COUNTRY VARCHAR(100),
TERRITORY VARCHAR(100),
CONTACTLASTNAME VARCHAR(100),
CONTACTFIRSTNAME VARCHAR(100),
DEALSIZE VARCHAR(100));
--LOAD SALES DATA SAMPLE FILE INTO TABLE

//CONFIRM DATA 
SELECT * FROM SALES;

//CREATE ROW ACCESS POLICY
CREATE OR REPLACE ROW ACCESS POLICY SALES_TERRITORY
    AS (TERRITORY STRING) RETURNS BOOLEAN ->
    CASE    WHEN 'SALES_MANAGER' = CURRENT_ROLE() THEN TRUE
            WHEN 'SALES_EMEA' = CURRENT_ROLE() AND TERRITORY = 'EMEA' THEN TRUE
            WHEN 'SALES_APAC' = CURRENT_ROLE() AND TERRITORY = 'APAC' THEN TRUE
    ELSE FALSE
END;

//APPLY THE ROW ACCESS POLICY TO THE TABLE
ALTER TABLE SALES
ADD ROW ACCESS POLICY SALES_TERRITORY
    ON (TERRITORY);


//CREATE ROLES
USE ROLE SECURITYADMIN;
CREATE OR REPLACE ROLE SALES_MANAGER;
CREATE OR REPLACE ROLE SALES_EMEA;
CREATE OR REPLACE ROLE SALES_APAC;

//GRANT PERMISSIONS ON OBJECTS TO ALL ROLES
GRANT USAGE ON WAREHOUSE COMPUTE_WH TO SALES_MANAGER;
GRANT USAGE ON WAREHOUSE COMPUTE_WH TO SALES_EMEA;
GRANT USAGE ON WAREHOUSE COMPUTE_WH TO SALES_APAC;

GRANT USAGE ON DATABASE ROW_ACCESS TO SALES_MANAGER;
GRANT USAGE ON DATABASE ROW_ACCESS TO SALES_EMEA;
GRANT USAGE ON DATABASE ROW_ACCESS TO SALES_APAC;

USE ROLE SYSADMIN;
GRANT USAGE ON SCHEMA PUBLIC TO SALES_MANAGER;
GRANT USAGE ON SCHEMA PUBLIC TO SALES_EMEA;
GRANT USAGE ON SCHEMA PUBLIC TO SALES_APAC;

GRANT SELECT ON TABLE SALES TO SALES_MANAGER;
GRANT SELECT ON TABLE SALES TO SALES_EMEA;
GRANT SELECT ON TABLE SALES TO SALES_APAC;

//ADD THESE ROLES TO YOUR OWN USER TO MAKE IT EASY TO TEST OUT //FOR THIS DEMO REPLACE MYUSERNAME WITH YOUR OWN USER NAME
USE ROLE SECURITYADMIN;
GRANT ROLE SALES_MANAGER TO USER MYUSERNAME;
GRANT ROLE SALES_EMEA TO USER MYUSERNAME;
GRANT ROLE SALES_APAC TO USER MYUSERNAME;

//TEST OUT THE DIFFERENT ROLES AND OBSERVE THE RESULTS
USE ROLE SALES_MANAGER;
SELECT TERRITORY, COUNT(*) 
FROM SALES
GROUP BY TERRITORY;

USE ROLE SALES_EMEA;
SELECT TERRITORY, COUNT(*) 
FROM SALES
GROUP BY TERRITORY;

USE ROLE SALES_APAC;
SELECT TERRITORY, COUNT(*) 
FROM SALES
GROUP BY TERRITORY;
S